@use 'sass:map' ;
@import '../variables.scss';

$themes: (
  light: (
    bg: $bgLight,
    bgNoise: $bgNoiseLight,
    textAccent: $colorPurple400,
    borderMain: $colorPurple200,
    bgBtnMain: $colorPurple400,
    bgBtnMainBack: $colorGreen200,
    bgBtnMainBackQ: $colorGreen400,
    bgBtnScnd: $colorTertiaryGreen100,
    bgField: $colorGrey200,
    textMain: $colorBlack,
    textMainBack: $colorWhite,
    textBlack: $colorBlack,
    btnBgDisabled: $colorGrey400,
    btnTextDisabled: $colorGrey700,

    // bgMain: $colorGreyDark100,

    bgRange: $colorWhite,
  ),
  dark: (
    bg: $bgDark,
    bgNoise: $bgNoiseDark,
    textAccent: $colorGreen100,
    borderMain: $colorGreen150,
    bgBtnMain: $colorGreen100,
    bgBtnMainBack: $colorPurple400,
    bgBtnMainBackQ: $colorPurple400,
    bgBtnScnd: $colorPurple200,
    bgField: $colorGrey700,
    textMain: $colorWhite,
    textMainBack: $colorBlack,
    textBlack: $colorGrey700,
    btnBgDisabled: $colorGrey200,
    btnTextDisabled: $colorGrey600,

    // bgMain: $colorOliveDark700,

    // bgButtonProfile: $colorJadeLight500,
    bgRange: $colorWhite,
  ),
);

@mixin themed {
  @each $theme, $map in $themes {
    :global(.theme--#{$theme}) & {
      $theme-map: () !global;

      @each $key, $submap in $map {
        $value: map.get($map, $key);
        $theme-map: map.merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;

      $theme-map: null !global;
    }
  }
}

@function t( $key ) {
  @return map-get( $theme-map , $key );
}

